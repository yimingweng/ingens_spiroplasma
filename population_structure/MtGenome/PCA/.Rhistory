View(resultFisher.wet)
resultFisher.wet
resultFisher.wet@description
resultFisher.wet
resultFisher.wet@geneData
resultFisher.wet@score
resultFisher.wet@description
resultFisher.wet
?runTest
resultFisher.wet@testName
resultFisher.wet@algorithm
resultFisher.wet@geneData
?GenTable
gene2go <- readMappings("C:/Users/wengz/Dropbox/Chapter 3/Nebria_ingens_WGS/Enrichment/Nriv_trinotate_BP_GOs", sep = "\t", IDsep = ",")
gene2go[lapply(gene2go,length)==0] <-  NA
# import the final gene list from the three way intersection
geneSel <- read.table("C:/Users/wengz/Dropbox/Chapter 3/Nebria_ingens_WGS/Enrichment/all_way_intersection.txt", header = F)
geneSel <- geneSel$V1
allGenes <- read.table("C:/Users/wengz/Dropbox/Chapter 3/Nebria_ingens_WGS/Enrichment/all_gene", header = F)
allGenes <- allGenes$V1
geneList <- factor(as.integer(allGenes %in% geneSel))
names(geneList) <- allGenes
str(geneList)
GOdata <- new("topGOdata", ontology = "BP", allGenes = geneList, annot = annFUN.gene2GO, gene2GO = gene2go)
GOdata
# enrichment tests
# take GO hierarchy into account
resultFisher.weit <- runTest(GOdata, algorithm="weight01", statistic="fisher")
View(resultFisher.weit)
resultFisher.weit
lenght(resultFisher.weit)
lengtht(resultFisher.weit)
length(resultFisher.weit)
length(resultFisher.weit@score)
allRes.weit <- GenTable(GOdata, classicFisher = resultFisher.weit, orderBy = "resultFisher", ranksOf = "classicFisher", topNodes = length(resultFisher.weit@score))
allRes.weit
resultFisher.cls <- runTest(GOdata, algorithm="classic", statistic="fisher")
allRes.cls <- GenTable(GOdata, classicFisher = resultFisher.cls, orderBy = "resultFisher", ranksOf = "classicFisher", topNodes = length(resultFisher.weit@score))
allRes.cls
# Put the results of the two together
pValue.cls <- score(resultFisher.cls)
pValue.weit <- score(resultFisher.weit)[names(pValue.cls)]
sel.go <- names(pValue.weit)[pValue.weit < 0.01]
sel.fun <- allRes.weit[which(allRes.weit$GO.ID == sel.go),]
sel.go
allRes.weit$GO.ID
allRes.weit$GO.ID
allRes.weit
allRes.weit[allRes.weit %in% allRes.weit$GO.ID & sel.go]
allRes.weit[allRes.weit %in% allRes.weit$GO.ID & as.factor(sel.go)]
as.factor(sel.go)
gol.go.table <- data.frame(sel.go)
gol.go.table <- data.frame(go = sel.go)
View(gol.go.table)
View(gol.go.table)
allRes.weit[GO.ID %in% gol.go.table$go]
allRes.weit[GO.ID %in% gol.go.table$go]
allRes.weit[allRes.weit$GO.ID %in% gol.go.table$go]
sel.fun <- allRes.weit[which(allRes.weit$GO.ID == gol.go.table$go),]
View(sel.fun)
sol.go.table <- data.frame(go = sel.go)
allRes.weit$GO.ID
allRes.weit[GO.ID %in% go.table$go]
data.frame(allRes.weit)[GO.ID %in% go.table$go]
allRes.weit$GO.ID == go.table$go
go.table <- data.frame(go = sel.go)
allRes.weit$GO.ID == go.table$go
class(sel.go)
as.vector(sel.go)
allRes.weit[GO.ID %in% as.vector(sel.go)]
allRes.weit[allRes.weit$GO.ID %in% as.vector(sel.go)]
allRes.weit[allRes.weit$GO.ID %in% as.vector(sel.go),]
sel.fun <- allRes.weit[allRes.weit$GO.ID %in% as.vector(sel.go),]
View(sel.fun)
sel.go.stat <- cbind(sel.fun, weight = pValue.weit[sel.go], classic = pValue.cls[sel.go])
View(sel.go.stat)
pValue.cls <- score(resultFisher.cls)
pValue.weit <- score(resultFisher.weit)[names(pValue.cls)]
sel.go <- names(pValue.weit)[pValue.weit < 0.05]
sel.fun <- allRes.weit[allRes.weit$GO.ID %in% as.vector(sel.go),]
sel.go.stat <- cbind(sel.fun, weight = pValue.weit[sel.go], classic = pValue.cls[sel.go])
View(sel.go.stat)
sel.go
sel.genes <- genesInTerm(myGOdata, sel.go)
sel.genes <- genesInTerm(GOdata, sel.go)
for (i in 1:length(sel.go))
{
go <- sel.go[i]
genesforterm <- sel.genes[go][[1]]
genesforterm <- paste(genesforterm, collapse=',')
print(paste("Term",go,"genes:",genesforterm))
}
pValue.cls <- score(resultFisher.cls)
pValue.weit <- score(resultFisher.weit)[names(pValue.cls)]
sel.go <- names(pValue.weit)[pValue.weit < 0.01]
sel.fun <- allRes.weit[allRes.weit$GO.ID %in% as.vector(sel.go),]
sel.go.stat <- cbind(sel.fun, weight = pValue.weit[sel.go], classic = pValue.cls[sel.go])
sel.genes <- genesInTerm(GOdata, sel.go)
for (i in 1:length(sel.go))
{
go <- sel.go[i]
genesforterm <- sel.genes[go][[1]]
genesforterm <- paste(genesforterm, collapse=',')
print(paste("Term",go,"genes:",genesforterm))
}
sel.genes
sel.go
sel.genes[go]
sel.genes
sel.genes[GO:2000587]
sel.genes[GO:2000587][[1]]
sel.go[i]
sel.go[1]
sel.genes[GO:0002265][[1]]
sel.genes[GO:0002265]
sel.genes["GO:0002265"]
sel.genes["GO:0002265"][[1]]
View(sel.genes)
sel.genes[["GO:0002265"]]
sel.genes[["GO:0007205"]]
sel.genes[["GO:008360"]]
sel.genes["GO:008360"]
sel.genes
sel.genes$`GO:0008360`
class(sel.genes)
test <- data.frame(sel.genes)
test <- as.data.frame(sel.genes)
do.call(rbind.data.frame, sel.genes)
test <- do.call(rbind.data.frame, sel.genes)
View(test)
View(sel.genes)
sel.genes[3]
View(test)
sel.genes[["GO:0008360"]]
test <- sel.genes
test <- df <- data.frame(matrix(unlist(sel.genes), nrow=length(sel.genes), byrow=TRUE))
View(test)
matrix(unlist(sel.genes)
test <- matrix(unlist(sel.genes))
View(test)
test <- data.frame(Reduce(rbind, sel.genes))
View(test)
test <- data.frame(Reduce(rbind, sel.genes))
test <- data.frame(matrix(unlist(sel.genes), nrow=length(sel.genes), byrow=TRUE))
test <- do.call(rbind.data.frame, sel.genes)
View(test)
View(test)
test <- data.frame(sel.genes)
View(sel.genes)
library(dplyr)
my_df <- reduce(sel.genes, bind_rows)
library(purrr)
my_df <- reduce(sel.genes, bind_rows)
print(as.data.frame(do.call(cbind, sel.genes)))
test <- print(as.data.frame(do.call(cbind, sel.genes)))
View(test)
View(test)
test <- print(as.data.frame(do.call(rbind, sel.genes)))
View(test)
sel.genes
sel.genes$values
sel.genes$Calues
sel.genes$Values
sel.genes[]
View(sel.genes)
unname(sel.genes)
unname(sel.genes[])
sel.go.stat <- cbind(sel.fun, weight = pValue.weit[sel.go], classic = pValue.cls[sel.go], gene=unname(sel.genes))
gene <- data.frame(unname(sel.genes))
gene <- unname(sel.genes)
View(gene)
for (i in 1:length(sel.go))
{
go <- sel.go[i]
genesforterm <- sel.genes[go][[1]]
genesforterm <- paste(genesforterm, collapse=',')
print(paste("Term",go,"genes:",genesforterm))
}
for (i in 1:length(sel.go))
{
go <- sel.go[i]
genesforterm <- sel.genes[go][[1]]
genesforterm <- paste(genesforterm, collapse=',')
dat <- print(paste("Term",go,"genes:",genesforterm))
datalist[[i]] <- dat
}
datalist <- NULL
for (i in 1:length(sel.go))
{
go <- sel.go[i]
genesforterm <- sel.genes[go][[1]]
genesforterm <- paste(genesforterm, collapse=',')
dat <- print(paste("Term",go,"genes:",genesforterm))
datalist[[i]] <- dat
}
View(datalist)
df_total <- NULL
for (i in 1:length(sel.go))
{
go <- sel.go[i]
genesforterm <- sel.genes[go][[1]]
genesforterm <- paste(genesforterm, collapse=',')
df <- data.frame(go_term=go, gene_list=genesforterm)
df_total <- rbind(df_total,df)
}
View(df_total)
for (i in 1:length(sel.go))
{
go <- sel.go[i]
genesforterm <- sel.genes[go][[1]]
genesforterm <- paste(genesforterm, collapse=',')
df <- data.frame(gene_list=genesforterm)
df_total <- rbind(df_total,df)
}
df_total <- NULL
for (i in 1:length(sel.go))
{
go <- sel.go[i]
genesforterm <- sel.genes[go][[1]]
genesforterm <- paste(genesforterm, collapse=',')
df <- data.frame(go_term=go, gene_list=genesforterm)
df_total <- rbind(df_total,df)
}
df_total <- NULL
for (i in 1:length(sel.go))
{
go <- sel.go[i]
genesforterm <- sel.genes[go][[1]]
genesforterm <- paste(genesforterm, collapse=',')
df <- data.frame(gene_list=genesforterm)
df_total <- rbind(df_total,df)
}
View(datalist)
View(df_total)
gene_list <- NULL
for (i in 1:length(sel.go))
{
go <- sel.go[i]
genesforterm <- sel.genes[go][[1]]
genesforterm <- paste(genesforterm, collapse=',')
df <- data.frame(gene_list=genesforterm)
gene_list <- rbind(gene_list,df)
}
View(gene_list)
sel.go.stat <- cbind(sel.fun, weight = pValue.weit[sel.go], classic = pValue.cls[sel.go], gene=gene_list$gene_list)
View(sel.go.stat)
write.csv(sel.go.stat, "C:/Users/wengz/Dropbox/Chapter 3/Nebria_ingens_WGS/Enrichment/WGS_weight_GO_enrich_p001.csv", row.names = F, quote = F)
gene_list <- NULL
for (i in 1:length(sel.go))
{
go <- sel.go[i]
genesforterm <- sel.genes[go][[1]]
genesforterm <- paste(genesforterm, collapse=';')
df <- data.frame(gene_list=genesforterm)
gene_list <- rbind(gene_list,df)
}
sel.go.stat <- cbind(sel.fun, weight = pValue.weit[sel.go], classic = pValue.cls[sel.go], gene=gene_list$gene_list)
write.csv(sel.go.stat, "C:/Users/wengz/Dropbox/Chapter 3/Nebria_ingens_WGS/Enrichment/WGS_weight_GO_enrich_p001.csv", row.names = F, quote = F)
gene2go <- readMappings("C:/Users/wengz/Dropbox/Chapter 3/Nebria_ingens_WGS/Enrichment/Nriv_trinotate_BP_GOs", sep = "\t", IDsep = ",")
gene2go[lapply(gene2go,length)==0] <-  NA
# import the final gene list from the three way intersection
geneSel <- read.table("C:/Users/wengz/Dropbox/Chapter 3/Nebria_ingens_WGS/Enrichment/all_way_intersection.txt", header = F)
geneSel <- geneSel$V1
allGenes <- read.table("C:/Users/wengz/Dropbox/Chapter 3/Nebria_ingens_WGS/Enrichment/all_gene", header = F)
allGenes <- allGenes$V1
geneList <- factor(as.integer(allGenes %in% geneSel))
names(geneList) <- allGenes
str(geneList)
GOdata <- new("topGOdata", ontology = "BP", allGenes = geneList, annot = annFUN.gene2GO, gene2GO = gene2go)
GOdata
View(gene2go)
View(GOdata)
GOdata@description
GOdata@geneSelectionFun
resultFisher.weit <- runTest(GOdata, algorithm="weight01", statistic="fisher")
allRes.weit <- GenTable(GOdata, classicFisher = resultFisher.weit, orderBy = "resultFisher", ranksOf = "classicFisher", topNodes = length(resultFisher.weit@score))
allRes.weit
View(allRes.weit)
?GenTable
allRes.weit <- GenTable(GOdata, classicFisher = resultFisher.weit, orderBy = "resultFisher", ranksOf = "classicFisher", numChar=1000, topNodes = length(resultFisher.weit@score))
View(allRes.weit)
# Do not take the GO hierarchy into account
resultFisher.cls <- runTest(GOdata, algorithm="classic", statistic="fisher")
allRes.cls <- GenTable(GOdata, classicFisher = resultFisher.cls, orderBy = "resultFisher", ranksOf = "classicFisher", numChar=1000, topNodes = length(resultFisher.weit@score))
allRes.cls
# Put the results of the two together
pValue.cls <- score(resultFisher.cls)
pValue.weit <- score(resultFisher.weit)[names(pValue.cls)]
sel.go <- names(pValue.weit)[pValue.weit < 0.01]
sel.fun <- allRes.weit[allRes.weit$GO.ID %in% as.vector(sel.go),]
sel.genes <- genesInTerm(GOdata, sel.go)
gene_list <- NULL
for (i in 1:length(sel.go))
{
go <- sel.go[i]
genesforterm <- sel.genes[go][[1]]
genesforterm <- paste(genesforterm, collapse=';')
df <- data.frame(gene_list=genesforterm)
gene_list <- rbind(gene_list,df)
}
sel.go.stat <- cbind(sel.fun, weight = pValue.weit[sel.go], classic = pValue.cls[sel.go], gene=gene_list$gene_list)
write.csv(sel.go.stat, "C:/Users/wengz/Dropbox/Chapter 3/Nebria_ingens_WGS/Enrichment/WGS_weight_GO_enrich_p001.csv", row.names = F, quote = F)
geneSel <- read.table("C:/Users/wengz/Dropbox/Chapter 3/Nebria_ingens_WGS/Enrichment/RAiSD_OmegaPlus_intersection.txt", header = F)
geneSel <- geneSel$V1
allGenes <- read.table("C:/Users/wengz/Dropbox/Chapter 3/Nebria_ingens_WGS/Enrichment/all_gene", header = F)
allGenes <- allGenes$V1
geneList <- factor(as.integer(allGenes %in% geneSel))
names(geneList) <- allGenes
str(geneList)
GOdata <- new("topGOdata", ontology = "BP", allGenes = geneList, annot = annFUN.gene2GO, gene2GO = gene2go)
GOdata
# among 17834 genes, 9348 genes have Go annotation
# in the 9348 genes, 115 genes are significant
# enrichment tests
# take GO hierarchy into account
resultFisher.weit <- runTest(GOdata, algorithm="weight01", statistic="fisher")
allRes.weit <- GenTable(GOdata, classicFisher = resultFisher.weit, orderBy = "resultFisher", ranksOf = "classicFisher", numChar=1000, topNodes = length(resultFisher.weit@score))
allRes.weit
resultFisher.cls <- runTest(GOdata, algorithm="classic", statistic="fisher")
allRes.cls <- GenTable(GOdata, classicFisher = resultFisher.cls, orderBy = "resultFisher", ranksOf = "classicFisher", numChar=1000, topNodes = length(resultFisher.weit@score))
allRes.cls
# Put the results of the two together
pValue.cls <- score(resultFisher.cls)
pValue.weit <- score(resultFisher.weit)[names(pValue.cls)]
sel.go <- names(pValue.weit)[pValue.weit < 0.01]
sel.fun <- allRes.weit[allRes.weit$GO.ID %in% as.vector(sel.go),]
sel.genes <- genesInTerm(GOdata, sel.go)
gene_list <- NULL
for (i in 1:length(sel.go))
{
go <- sel.go[i]
genesforterm <- sel.genes[go][[1]]
genesforterm <- paste(genesforterm, collapse=';')
df <- data.frame(gene_list=genesforterm)
gene_list <- rbind(gene_list,df)
}
sel.go.stat <- cbind(sel.fun, weight = pValue.weit[sel.go], classic = pValue.cls[sel.go], gene=gene_list$gene_list)
View(sel.go.stat)
pValue.cls <- score(resultFisher.cls)
pValue.weit <- score(resultFisher.weit)[names(pValue.cls)]
sel.go <- names(pValue.weit)[pValue.weit < 0.05]
sel.fun <- allRes.weit[allRes.weit$GO.ID %in% as.vector(sel.go),]
sel.genes <- genesInTerm(GOdata, sel.go)
gene_list <- NULL
for (i in 1:length(sel.go))
{
go <- sel.go[i]
genesforterm <- sel.genes[go][[1]]
genesforterm <- paste(genesforterm, collapse=';')
df <- data.frame(gene_list=genesforterm)
gene_list <- rbind(gene_list,df)
}
sel.go.stat <- cbind(sel.fun, weight = pValue.weit[sel.go], classic = pValue.cls[sel.go], gene=gene_list$gene_list)
View(sel.go.stat)
View(sel.go.stat)
View(sel.go.stat)
write.csv(sel.go.stat, "C:/Users/wengz/Dropbox/Chapter 3/Nebria_ingens_WGS/Enrichment/RDOMG_weight_GO_enrich_p005.csv", row.names = F, quote = F)
geneSel <- read.table("C:/Users/wengz/Dropbox/Chapter 3/Nebria_ingens_WGS/Enrichment/all_way_intersection.txt", header = F)
geneSel <- geneSel$V1
allGenes <- read.table("C:/Users/wengz/Dropbox/Chapter 3/Nebria_ingens_WGS/Enrichment/all_gene", header = F)
allGenes <- allGenes$V1
geneList <- factor(as.integer(allGenes %in% geneSel))
names(geneList) <- allGenes
str(geneList)
GOdata <- new("topGOdata", ontology = "BP", allGenes = geneList, annot = annFUN.gene2GO, gene2GO = gene2go)
GOdata
# among 17834 genes, 9348 genes have Go annotation
# in the 9348 genes, 115 genes are significant
# enrichment tests
# take GO hierarchy into account
resultFisher.weit <- runTest(GOdata, algorithm="weight01", statistic="fisher")
allRes.weit <- GenTable(GOdata, classicFisher = resultFisher.weit, orderBy = "resultFisher", ranksOf = "classicFisher", numChar=1000, topNodes = length(resultFisher.weit@score))
allRes.weit
# Do not take the GO hierarchy into account
resultFisher.cls <- runTest(GOdata, algorithm="classic", statistic="fisher")
allRes.cls <- GenTable(GOdata, classicFisher = resultFisher.cls, orderBy = "resultFisher", ranksOf = "classicFisher", numChar=1000, topNodes = length(resultFisher.weit@score))
allRes.cls
# Put the results of the two together
pValue.cls <- score(resultFisher.cls)
pValue.weit <- score(resultFisher.weit)[names(pValue.cls)]
sel.go <- names(pValue.weit)[pValue.weit < 0.05]
sel.fun <- allRes.weit[allRes.weit$GO.ID %in% as.vector(sel.go),]
sel.genes <- genesInTerm(GOdata, sel.go)
gene_list <- NULL
for (i in 1:length(sel.go))
{
go <- sel.go[i]
genesforterm <- sel.genes[go][[1]]
genesforterm <- paste(genesforterm, collapse=';')
df <- data.frame(gene_list=genesforterm)
gene_list <- rbind(gene_list,df)
}
sel.go.stat <- cbind(sel.fun, weight = pValue.weit[sel.go], classic = pValue.cls[sel.go], gene=gene_list$gene_list)
write.csv(sel.go.stat, "C:/Users/wengz/Dropbox/Chapter 3/Nebria_ingens_WGS/Enrichment/WGS_weight_GO_enrich_p005.csv", row.names = F, quote = F)
View(sel.go.stat)
gene2go <- readMappings("C:/Users/wengz/Dropbox/Chapter 3/Nebria_ingens_WGS/Enrichment/Nriv_trinotate_BP_GOs", sep = "\t", IDsep = ",")
gene2go[lapply(gene2go,length)==0] <-  NA
geneSel <- read.table("C:/Users/wengz/Dropbox/Chapter 3/Nebria_ingens_WGS/Enrichment/RAiSD_OmegaPlus_intersection.txt", header = F)
geneSel <- geneSel$V1
allGenes <- read.table("C:/Users/wengz/Dropbox/Chapter 3/Nebria_ingens_WGS/Enrichment/all_gene", header = F)
allGenes <- allGenes$V1
geneList <- factor(as.integer(allGenes %in% geneSel))
names(geneList) <- allGenes
str(geneList)
GOdata <- new("topGOdata", ontology = "BP", allGenes = geneList, annot = annFUN.gene2GO, gene2GO = gene2go)
GOdata
gene2go <- readMappings("C:/Users/wengz/Dropbox/Chapter 3/Nebria_ingens_WGS/Enrichment/Nriv_trinotate_BP_GOs", sep = "\t", IDsep = ",")
gene2go[lapply(gene2go,length)==0] <-  NA
# import the final gene list from the three way intersection
geneSel <- read.table("C:/Users/wengz/Dropbox/Chapter 3/Nebria_ingens_WGS/Enrichment/RAiSD_OmegaPlus_intersection.txt", header = F)
geneSel <- geneSel$V1
allGenes <- read.table("C:/Users/wengz/Dropbox/Chapter 3/Nebria_ingens_WGS/Enrichment/all_gene", header = F)
allGenes <- allGenes$V1
geneList <- factor(as.integer(allGenes %in% geneSel))
names(geneList) <- allGenes
str(geneList)
GOdata <- new("topGOdata", ontology = "BP", allGenes = geneList, annot = annFUN.gene2GO, gene2GO = gene2go)
GOdata
# among 17834 genes, 9348 genes have Go annotation
# in the 9348 genes, 115 genes are significant
# enrichment tests
# take GO hierarchy into account
resultFisher.weit <- runTest(GOdata, algorithm="weight01", statistic="fisher")
allRes.weit <- GenTable(GOdata, classicFisher = resultFisher.weit, orderBy = "resultFisher", ranksOf = "classicFisher", numChar=1000, topNodes = length(resultFisher.weit@score))
allRes.weit
# Do not take the GO hierarchy into account
resultFisher.cls <- runTest(GOdata, algorithm="classic", statistic="fisher")
allRes.cls <- GenTable(GOdata, classicFisher = resultFisher.cls, orderBy = "resultFisher", ranksOf = "classicFisher", numChar=1000, topNodes = length(resultFisher.weit@score))
allRes.cls
library(topGO)
gene2go <- readMappings("C:/Users/wengz/Dropbox/Chapter 3/Nebria_ingens_WGS/Enrichment/Nriv_trinotate_BP_GOs", sep = "\t", IDsep = ",")
gene2go[lapply(gene2go,length)==0] <-  NA
# import the final gene list from the three way intersection
geneSel <- read.table("C:/Users/wengz/Dropbox/Chapter 3/Nebria_ingens_WGS/Enrichment/RAiSD_OmegaPlus_intersection.txt", header = F)
geneSel <- geneSel$V1
allGenes <- read.table("C:/Users/wengz/Dropbox/Chapter 3/Nebria_ingens_WGS/Enrichment/all_gene", header = F)
allGenes <- allGenes$V1
geneList <- factor(as.integer(allGenes %in% geneSel))
names(geneList) <- allGenes
str(geneList)
GOdata <- new("topGOdata", ontology = "BP", allGenes = geneList, annot = annFUN.gene2GO, gene2GO = gene2go)
GOdata
resultFisher.weit <- runTest(GOdata, algorithm="weight01", statistic="fisher")
allRes.weit <- GenTable(GOdata, classicFisher = resultFisher.weit, orderBy = "resultFisher", ranksOf = "classicFisher", numChar=1000, topNodes = length(resultFisher.weit@score))
allRes.weit
allRes.weit
View(allRes.weit)
pValue.weit <- score(resultFisher.weit)
View(resultFisher.weit)
pValue.weit
head(pValue.weit)
tail(pValue.weit)
min(pValue.weit)
sel.fun <- allRes.weit[allRes.weit$GO.ID %in% as.vector(sel.go),]
pValue.cls <- score(resultFisher.cls)
pValue.weit <- score(resultFisher.weit)[names(pValue.cls)]
sel.go <- names(pValue.weit)[pValue.weit < 0.05]
sel.fun <- allRes.weit[allRes.weit$GO.ID %in% as.vector(sel.go),]
View(sel.fun)
View(allRes.weit)
View(sel.fun)
setwd("C:/Users/wengz/Dropbox/Spiroplasma_project/MtGenome/PCA")
library(gdsfmt)
library(SNPRelate)
# convert vcf to gds
vcf.fn <- "mtgenome_snps_final_trimmed.vcf"
snpgdsVCF2GDS(vcf.fn, "mtgenome.gds", method="copy.num.of.ref")
min(pValue.weit)
snpgdsSummary("mtgenome.gds")
genofile <- snpgdsOpen("mtgenome.gds")
set.seed(1000)
# Try different LD thresholds for sensitivity analysis
snpset <- snpgdsLDpruning(genofile, ld.threshold=0.9, autosome.only=FALSE)
snpset.id <- unlist(unname(snpset))
samp_id <- read.gdsn(index.gdsn(genofile, "sample.id"))
pca <- snpgdsPCA(genofile,
sample.id=samp_id,
snp.id=snpset.id,
autosome.only=FALSE,
maf=0.05,
missing.rate=0.25,
num.thread=2)
pc.percent <- pca$varprop*100
head(round(pc.percent, 2))
sample.info <- read.table("C:/Users/wengz/Dropbox/Spiroplasma_project/sample_data.txt", fileEncoding="UTF-8-BOM")
sample.info <- read.table("C:/Users/wengz/Dropbox/Spiroplasma_project/sample_data.txt", header=T, sep="\t")
View(sample.info)
pop.info=sample.info[,c(1,2,3)]
names(pop.info)[1] <- "sample.id"
names(pop.info)[3] <- "pop_code"
names(pop.info)[2] <- "lineage_code"
pop.info = data.frame(lapply(pop.info, function(x) {gsub("YMW17-0", "YMW17-", x)}))
tab <- data.frame(sample.id = pca$sample.id,
lineage = factor(pop.info$lineage_code)[match(pca$sample.id, pop.info$sample.id)],
pop = factor(pop.info$pop_code)[match(pca$sample.id, pop.info$sample.id)],
EV1 = pca$eigenvect[,1],    # the first eigenvector
EV2 = pca$eigenvect[,2],    # the second eigenvector
EV3 = pca$eigenvect[,3],
EV4 = pca$eigenvect[,4],
EV5 = pca$eigenvect[,5],
EV6 = pca$eigenvect[,6],
stringsAsFactors = FALSE)
head(tab)
x11()
plot(tab$EV1, tab$EV2, col=as.integer(tab$pop), pch=16, xlab="eigenvector 1", ylab="eigenvector 2")
legend("topleft", legend=levels(tab$pop), pch=16, col=1:nlevels(tab$pop))
x11()
plot(tab$EV1, tab$EV2, col=as.integer(tab$lineage), pch=16, xlab="eigenvector 1", ylab="eigenvector 2")
legend("topleft", legend=levels(tab$lineage), pch=16, col=1:nlevels(tab$lineage))
x11()
lbls <- paste("PC", 1:6, "\n", format(pc.percent[1:6], digits=2), "%", sep="")
pairs(pca$eigenvect[,1:6], col=tab$lineage, labels=lbls)
